{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","day","hour","minute","second","getTimeUntil","deadline","_this2","setInterval","num","time","Date","parse","seconds","Math","floor","minutes","hours","days","setState","react_default","a","createElement","className","leading0","Component","App","newDeadline","src_Clock","type","placeholder","onChange","event","target","value","onClick","changeDeadline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c630a2b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Clock extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            day: 0,\n            hour: 0,\n            minute: 0,\n            second: 0\n        };\n    }\n\n    componentWillMount() {\n        this.getTimeUntil( this.props.deadline );\n    }\n\n    componentDidMount() {\n        setInterval( () => {\n            this.getTimeUntil( this.props.deadline );\n        }, 1000)\n    }\n\n    leading0( num ) {\n        if( num < 10) {\n            return '0' + num;\n        } \n\n        return num;\n    }\n\n    getTimeUntil( deadline ) {\n        const time = Date.parse(deadline) - Date.parse( new Date() );\n\n        const seconds = Math.floor( (time/1000) % 60 );\n        const minutes = Math.floor( (time/1000/60) % 60 );\n        const hours = Math.floor( (time/(1000 * 60 * 60)) % 24 );\n        const days = Math.floor( time/(1000 * 60 * 60 *24));\n\n        this.setState({\n            day: days,\n            hour: hours,\n            minute: minutes,\n            second: seconds\n        })\n    }\n\n    render() {\n\n       \n\n        return (\n            <div className=\"pt-4 pb-4\">\n                <div className=\"Clock-days\"> {this.leading0( this.state.day )} days </div>\n                <div className=\"Clock-hours\"> {this.leading0( this.state.hour )} hours </div>\n                <div className=\"Clock-minutes\"> {this.leading0( this.state.minute )} minutes </div>\n                <div className=\"Clock-seconds\"> {this.leading0( this.state.second )} seconds </div>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React, {Component} from 'react';\nimport Clock from './Clock';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deadline: 'December 25, 2018',\n            newDeadline: ''\n        };\n    }\n\n    changeDeadline() {\n        //always use setState - never mutate directly\n        this.setState({\n            deadline: this.state.newDeadline\n        })\n    }\n\n    \n    \n    render() {\n        return (\n            <div className=\"App container\">\n                \n                <div className=\"row pt-5 mt-5\">\n                    <div className=\"col-10 offset-1 text-center\">\n                        \n                        <div className=\"App-title\">\n                            Countdown to {this.state.deadline}\n                        </div>\n                        \n                    </div>\n                </div>\n\n                <div className=\"row align-items-center\">\n                    <div className=\"col-10 offset-1 text-center\">\n                        \n                        <Clock deadline={this.state.deadline}/>\n                        \n                    </div>\n                </div>\n\n                <div className=\"row align-items-center\">\n                    <div className=\"col-8 offset-2 text-center\">\n                        \n                        <input className=\"form-control form-control-lg mb-4\" type=\"text\" placeholder=\"insert date\" onChange={ event => this.setState({newDeadline: event.target.value})} />\n\n                        <button className=\"btn btn-secondary btn-lg pl-5 pr-5\" onClick={ () => this.changeDeadline() }>\n                            Submit\n                        </button>\n                        \n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import 'bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}